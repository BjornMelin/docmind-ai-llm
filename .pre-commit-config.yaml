# Pre-commit hooks for DocMind AI Quality Gates
# Install with: pre-commit install
# Run with: pre-commit run --all-files

repos:
  # Python Code Quality
  - repo: https://github.com/psf/black
    rev: 24.10.0
    hooks:
      - id: black
        language_version: python3
        args: ["--line-length=88"]

  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.8.4
    hooks:
      - id: ruff
        args: [--fix]
        types: [python]
      - id: ruff-format
        types: [python]

  # Import Sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: ["--profile", "black", "--line-length=88"]

  # Security Scanning
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.10
    hooks:
      - id: bandit
        args: ["-c", "pyproject.toml"]
        additional_dependencies: ["bandit[toml]"]
        exclude: ^tests/

  # Type Checking  
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.13.0
    hooks:
      - id: mypy
        additional_dependencies: [types-all]
        args: [--ignore-missing-imports, --no-strict-optional]
        exclude: ^(tests/|scripts/)

  # General Code Quality
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-toml
      - id: check-json
      - id: check-xml
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-docstring-first
      - id: check-ast
      - id: debug-statements
      - id: name-tests-test
        args: ["--pytest-test-first"]
      - id: requirements-txt-fixer
      - id: fix-byte-order-marker
      - id: mixed-line-ending
        args: ["--fix=lf"]

  # Dockerfile Quality
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        args: [--ignore, DL3008, --ignore, DL3009]

  # Markdown Quality
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.42.0
    hooks:
      - id: markdownlint
        args: [--fix]

  # Custom Quality Gates
  - repo: local
    hooks:
      # Coverage threshold check
      - id: coverage-check
        name: Coverage Threshold Check
        entry: python scripts/check_coverage.py
        args: ["--threshold", "80", "--fail-under"]
        language: system
        types: [python]
        pass_filenames: false
        stages: [pre-push]

      # Performance regression detection
      - id: performance-monitor
        name: Performance Regression Monitor
        entry: python scripts/performance_monitor.py
        args: ["--collection-only", "--threshold", "20"]
        language: system
        types: [python]
        pass_filenames: false
        stages: [pre-push]

      # Test health monitoring  
      - id: test-health
        name: Test Suite Health Monitor
        entry: python scripts/test_health.py
        args: ["--patterns", "--test-dirs", "tests/"]
        language: system
        types: [python]
        pass_filenames: false
        stages: [pre-push]

      # Fast unit tests on commit
      - id: unit-tests
        name: Fast Unit Tests
        entry: uv run python -m pytest
        args: ["-m", "unit", "--tb=short", "-q", "--maxfail=5"]
        language: system
        types: [python]
        pass_filenames: false

      # Documentation string validation
      - id: docstring-check
        name: Docstring Quality Check
        entry: python -c "
import ast
import sys
from pathlib import Path

def check_docstrings(file_path):
    try:
        with open(file_path) as f:
            tree = ast.parse(f.read())
    except:
        return True
    
    missing_docstrings = []
    for node in ast.walk(tree):
        if isinstance(node, (ast.FunctionDef, ast.ClassDef, ast.AsyncFunctionDef)):
            if node.name.startswith('_'):
                continue
            docstring = ast.get_docstring(node)
            if not docstring:
                missing_docstrings.append(f'{file_path}:{node.lineno} - Missing docstring for {node.name}')
    
    if missing_docstrings:
        print('\n'.join(missing_docstrings))
        return False
    return True

success = True
for file_path in sys.argv[1:]:
    if not check_docstrings(file_path):
        success = False

sys.exit(0 if success else 1)
        "
        language: system
        files: ^src/.*\.py$
        types: [python]

      # Test discovery validation
      - id: test-discovery
        name: Test Discovery Validation
        entry: python -c "
import subprocess
import sys

try:
    result = subprocess.run(
        ['uv', 'run', 'python', '-m', 'pytest', '--collect-only', '-q'],
        capture_output=True, text=True, timeout=30
    )
    
    if result.returncode != 0:
        print('Test discovery failed:')
        print(result.stdout)
        print(result.stderr)
        sys.exit(1)
        
    # Check for reasonable test count
    lines = result.stdout.split('\n')
    test_count = 0
    for line in lines:
        if ' collected' in line:
            try:
                test_count = int(line.split()[0])
                break
            except (ValueError, IndexError):
                pass
    
    if test_count == 0:
        print('No tests discovered - check test files')
        sys.exit(1)
    elif test_count < 10:
        print(f'Warning: Only {test_count} tests discovered')
    
    print(f'âœ“ Discovered {test_count} tests successfully')
    
except subprocess.TimeoutExpired:
    print('Test discovery timed out')
    sys.exit(1)
except Exception as e:
    print(f'Test discovery error: {e}')
    sys.exit(1)
        "
        language: system
        types: [python]
        pass_filenames: false

# Configuration
default_language_version:
  python: python3.11

default_stages: [commit]

ci:
  autofix_prs: true
  autoupdate_branch: 'main'
  autoupdate_commit_msg: 'chore: update pre-commit hooks'
  autoupdate_schedule: weekly