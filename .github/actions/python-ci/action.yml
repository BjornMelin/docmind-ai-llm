name: python-ci
description: Lint and test runner for DocMind AI (ruff, pylint, pytest, coverage gate)

inputs:
  run_type:
    description: unit | integration | full
    required: true
  coverage:
    description: 'Run coverage gates (true|false)'
    default: 'false'
    required: false

runs:
  using: composite
  steps:
    - name: Ruff format (check only)
      shell: bash
      run: uv run ruff format --check .

    - name: Ruff lint
      shell: bash
      run: uv run ruff check .

    - name: Pylint (repo-wide)
      shell: bash
      run: uv run pylint -j 0 --rcfile=pyproject.toml --fail-under=${{ env.PYLINT_FAIL_UNDER }} src tests scripts

    - name: Run tests via runner
      shell: bash
      run: |
        case "${{ inputs.run_type }}" in
          unit)
            uv run python scripts/run_tests.py --unit
            ;;
          integration)
            uv run python scripts/run_tests.py --integration
            ;;
          full)
            uv run python scripts/run_tests.py --coverage
            ;;
          *)
            echo "Unknown run_type: ${{ inputs.run_type }}" >&2
            exit 2
            ;;
        esac

    - name: Enforce coverage thresholds
      if: ${{ inputs.coverage == 'true' }}
      shell: bash
      run: uv run python scripts/run_quality_gates.py --ci --report

    - name: Coverage summary
      if: ${{ inputs.coverage == 'true' }}
      shell: bash
      run: |
        echo "## Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        uv run coverage report --show-missing >> $GITHUB_STEP_SUMMARY || echo "(No coverage data)" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

