[
  {
    "id": 3191631564,
    "node_id": "PRR_kwDONtruzM6-PG7M",
    "user": {
      "login": "copilot-pull-request-reviewer[bot]",
      "id": 175728472,
      "node_id": "BOT_kgDOCnlnWA",
      "avatar_url": "https://avatars.githubusercontent.com/in/946600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/copilot-pull-request-reviewer%5Bbot%5D",
      "html_url": "https://github.com/apps/copilot-pull-request-reviewer",
      "followers_url": "https://api.github.com/users/copilot-pull-request-reviewer%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/copilot-pull-request-reviewer%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/copilot-pull-request-reviewer%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/copilot-pull-request-reviewer%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/copilot-pull-request-reviewer%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/copilot-pull-request-reviewer%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/copilot-pull-request-reviewer%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/copilot-pull-request-reviewer%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/copilot-pull-request-reviewer%5Bbot%5D/received_events",
      "type": "Bot",
      "user_view_type": "public",
      "site_admin": false
    },
    "body": "## Pull Request Overview\n\nThis PR implements the ingestion pipeline described in SPEC-002, providing standardized document processing with Unstructured (`partition(auto)`) and LlamaIndex `IngestionPipeline`, plus OCR fallback, deterministic IDs, PDF page image artifacts, and a local DuckDB-backed cache for idempotent, repeatable runs.\n\nKey changes include:\n- Unstructured `partition(auto)` with strategy mapping (hi_res/fast/ocr_only) and OCR fallback\n- LlamaIndex `IngestionPipeline` + `IngestionCache` using `DuckDBKVStore`\n- Deterministic node IDs via SHA-256 on normalized content and page image emission for PDFs\n\n### Reviewed Changes\n\nCopilot reviewed 38 out of 38 changed files in this pull request and generated 5 comments.\n\n<details>\n<summary>Show a summary per file</summary>\n\n| File | Description |\r\n| ---- | ----------- |\r\n| src/processing/document_processor.py | Core ingestion logic with UnstructuredTransformation, strategy mapping, caching, and PDF page-image emission |\r\n| src/processing/pdf_pages.py | PDF page image rendering with stable filenames and bbox metadata |\r\n| src/processing/utils.py | Deterministic ID generation via SHA-256 normalization and hashing utilities |\r\n| src/models/schemas.py | PdfPageImageNode model and ErrorResponse enrichment |\r\n| tests/unit/processing/* | Unit tests for PDF pages, deterministic IDs, and document processor components |\r\n| tests/integration/test_ingestion_pipeline_pdf_images.py | Integration tests for PDF image emission and OCR fallback |\r\n| tests/integration/test_chunking_integration.py | Updated chunking tests with PDF page image patching |\r\n| tests/integration/test_settings_page.py | Settings page integration tests with LLM backend validation |\r\n| src/config/settings.py | Strict LLM backend validation (literal type enforcement) |\r\n| scripts/* | Updated script references and performance monitoring enhancements |\n</details>\n\n\n\n\n\n\n---\n\n<sub>**Tip:** Customize your code reviews with copilot-instructions.md. <a href=\"/BjornMelin/docmind-ai-llm/new/main/.github?filename=copilot-instructions.md\" class=\"Link--inTextBlock\" target=\"_blank\" rel=\"noopener noreferrer\">Create the file</a> or <a href=\"https://docs.github.com/en/copilot/customizing-copilot/adding-repository-custom-instructions-for-github-copilot\" class=\"Link--inTextBlock\" target=\"_blank\" rel=\"noopener noreferrer\">learn how to get started</a>.</sub>",
    "state": "COMMENTED",
    "html_url": "https://github.com/BjornMelin/docmind-ai-llm/pull/30#pullrequestreview-3191631564",
    "pull_request_url": "https://api.github.com/repos/BjornMelin/docmind-ai-llm/pulls/30",
    "author_association": "NONE",
    "_links": {
      "html": {
        "href": "https://github.com/BjornMelin/docmind-ai-llm/pull/30#pullrequestreview-3191631564"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/BjornMelin/docmind-ai-llm/pulls/30"
      }
    },
    "submitted_at": "2025-09-06T06:24:47Z",
    "commit_id": "b651526b91f41cf2b95c4507f71794ba6f23f998"
  },
  {
    "id": 3191631643,
    "node_id": "PRR_kwDONtruzM6-PG8b",
    "user": {
      "login": "sourcery-ai[bot]",
      "id": 58596630,
      "node_id": "MDM6Qm90NTg1OTY2MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/in/48477?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sourcery-ai%5Bbot%5D",
      "html_url": "https://github.com/apps/sourcery-ai",
      "followers_url": "https://api.github.com/users/sourcery-ai%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/sourcery-ai%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/sourcery-ai%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sourcery-ai%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sourcery-ai%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/sourcery-ai%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/sourcery-ai%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/sourcery-ai%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sourcery-ai%5Bbot%5D/received_events",
      "type": "Bot",
      "user_view_type": "public",
      "site_admin": false
    },
    "body": "Hey there - I've reviewed your changes and they look great!\n\n<details>\n<summary>Prompt for AI Agents</summary>\n\n~~~markdown\nPlease address the comments from this code review:\n## Individual Comments\n\n### Comment 1\n<location> `src/processing/document_processor.py:329` </location>\n<code_context>\n-\n-def check_nvidia_smi() -> Dict[str, Any]:\n-    \"\"\"Check NVIDIA driver and GPU status\"\"\"\n-    try:\n-        result = subprocess.run(['nvidia-smi'], capture_output=True, text=True)\n-        if result.returncode == 0:\n</code_context>\n\n<issue_to_address>\nSuppressing exceptions when hashing image bytes may hide underlying issues.\n\nInstead of setting img_hash to an empty string on failure, log the exception or issue a warning to help identify potential file corruption or access problems.\n</issue_to_address>\n\n### Comment 2\n<location> `src/processing/pdf_pages.py:84` </location>\n<code_context>\n+            img_name = f\"{pdf_path.stem}__page-{idx}.png\"\n+            img_path = out_dir / img_name\n+\n+            if not img_path.exists():\n+                pix = page.get_pixmap(matrix=mat)\n+                pix.save(str(img_path))\n+\n+            rect = page.rect  # has x0, y0, x1, y1 floats\n</code_context>\n\n<issue_to_address>\nIdempotent image writing may not update images if the source PDF changes.\n\nSince images are only written if they don't exist, updates to the PDF won't be reflected in the output. Implement a check (such as comparing file hashes) to ensure images are refreshed when the PDF changes.\n</issue_to_address>\n\n### Comment 3\n<location> `tests/unit/processing/test_pdf_pages_unit.py:15` </location>\n<code_context>\n+from src.processing.utils import sha256_id\n+\n+\n+@pytest.mark.unit\n+def test_sha256_id_determinism() -> None:\n+    \"\"\"sha256_id returns stable values for equivalent inputs.\"\"\"\n</code_context>\n\n<issue_to_address>\nPDF page image utility is tested for stable filenames and bbox.\n\nPlease add tests for multi-page PDFs and for cases where image files already exist to verify correct processing and idempotency.\n</issue_to_address>\n\n### Comment 4\n<location> `tests/unit/config/test_settings.py:460` </location>\n<code_context>\n     \"\"\"Test LLM backend validation and warnings.\"\"\"\n\n     def test_valid_llm_backends(self):\n-        \"\"\"Test all valid LLM backends are accepted.\"\"\"\n-        valid_backends = [\"ollama\", \"llamacpp\", \"vllm\", \"openai\"]\n+        \"\"\"Test all valid LLM backends are accepted (strict set).\"\"\"\n+        valid_backends = [\"ollama\", \"llamacpp\", \"vllm\", \"lmstudio\"]\n\n         for backend in valid_backends:\n</code_context>\n\n<issue_to_address>\nLLM backend validation tests updated for strict set.\n\nPlease add a test case for unsupported backends to confirm that errors or warnings are raised as expected.\n</issue_to_address>\n\n### Comment 5\n<location> `src/processing/pdf_pages.py:55` </location>\n<code_context>\n\n\n-__all__ = [\"pdf_pages_to_image_documents\"]\n+def save_pdf_page_images(pdf_path: Path, out_dir: Path, dpi: int = 180) -> list[dict]:\n+    \"\"\"Render each PDF page to a PNG with a stable filename and return metadata.\n+\n</code_context>\n\n<issue_to_address>\nConsider refactoring shared PDF rendering logic into a private helper function used by both public APIs to eliminate code duplication.\n\nYou can pull all of the “open‐pdf → render pages → save if missing → collect bbox” logic into one small helper, then have both public functions call it and just map its output to whatever shape they need:\n\n```python\n# new private helper\ndef _render_pdf_pages(\n    pdf_path: Path, out_dir: Path, dpi: int = 180\n) -> list[tuple[int, Path, fitz.Rect]]:\n    out_dir.mkdir(parents=True, exist_ok=True)\n    zoom = dpi / 72.0\n    mat = fitz.Matrix(zoom, zoom)\n    results: list[tuple[int, Path, fitz.Rect]] = []\n    with fitz.open(pdf_path) as doc:\n        for i, page in enumerate(doc, start=1):\n            img_name = f\"{pdf_path.stem}__page-{i}.png\"\n            img_path = out_dir / img_name\n            if not img_path.exists():\n                page.get_pixmap(matrix=mat).save(str(img_path))\n            results.append((i, img_path, page.rect))\n    return results\n```\n\nThen simplify your two public functions to just call it:\n\n```python\ndef save_pdf_page_images(\n    pdf_path: Path, out_dir: Path, dpi: int = 180\n) -> list[dict]:\n    entries = _render_pdf_pages(pdf_path, out_dir, dpi)\n    return [\n        {\n            \"page_no\": i,\n            \"image_path\": str(path),\n            \"bbox\": [float(rect.x0), float(rect.y0),\n                     float(rect.x1), float(rect.y1)],\n        }\n        for i, path, rect in entries\n    ]\n\n\ndef pdf_pages_to_image_documents(\n    pdf_path: Path, dpi: int = 180\n) -> tuple[list[ImageDocument], Path]:\n    out_dir = Path(tempfile.mkdtemp(prefix=uuid.uuid4().hex))\n    entries = _render_pdf_pages(pdf_path, out_dir, dpi)\n    docs = [\n        ImageDocument(\n            image_path=str(path),\n            metadata={\n                \"page\": i,\n                \"modality\": \"pdf_page_image\",\n                \"source\": str(pdf_path),\n            },\n        )\n        for i, path, _ in entries\n    ]\n    return docs, out_dir\n```\n\nThis removes all duplication while preserving both APIs.\n</issue_to_address>\n~~~\n\n</details>\n\n***\n\n<details>\n<summary>Sourcery is free for open source - if you like our reviews please consider sharing them ✨</summary>\n\n- [X](https://twitter.com/intent/tweet?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)\n- [Mastodon](https://mastodon.social/share?text=I%20just%20got%20an%20instant%20code%20review%20from%20%40SourceryAI%2C%20and%20it%20was%20brilliant%21%20It%27s%20free%20for%20open%20source%20and%20has%20a%20free%20trial%20for%20private%20code.%20Check%20it%20out%20https%3A//sourcery.ai)\n- [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https://sourcery.ai)\n- [Facebook](https://www.facebook.com/sharer/sharer.php?u=https://sourcery.ai)\n\n</details>\n\n<sub>\nHelp me be more useful! Please click 👍 or 👎 on each comment and I'll use the feedback to improve your reviews.\n</sub>",
    "state": "APPROVED",
    "html_url": "https://github.com/BjornMelin/docmind-ai-llm/pull/30#pullrequestreview-3191631643",
    "pull_request_url": "https://api.github.com/repos/BjornMelin/docmind-ai-llm/pulls/30",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "html": {
        "href": "https://github.com/BjornMelin/docmind-ai-llm/pull/30#pullrequestreview-3191631643"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/BjornMelin/docmind-ai-llm/pulls/30"
      }
    },
    "submitted_at": "2025-09-06T06:24:59Z",
    "commit_id": "b651526b91f41cf2b95c4507f71794ba6f23f998"
  },
  {
    "id": 3191634451,
    "node_id": "PRR_kwDONtruzM6-PHoT",
    "user": {
      "login": "chatgpt-codex-connector[bot]",
      "id": 199175422,
      "node_id": "BOT_kgDOC98s_g",
      "avatar_url": "https://avatars.githubusercontent.com/in/1144995?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chatgpt-codex-connector%5Bbot%5D",
      "html_url": "https://github.com/apps/chatgpt-codex-connector",
      "followers_url": "https://api.github.com/users/chatgpt-codex-connector%5Bbot%5D/followers",
      "following_url": "https://api.github.com/users/chatgpt-codex-connector%5Bbot%5D/following{/other_user}",
      "gists_url": "https://api.github.com/users/chatgpt-codex-connector%5Bbot%5D/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chatgpt-codex-connector%5Bbot%5D/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chatgpt-codex-connector%5Bbot%5D/subscriptions",
      "organizations_url": "https://api.github.com/users/chatgpt-codex-connector%5Bbot%5D/orgs",
      "repos_url": "https://api.github.com/users/chatgpt-codex-connector%5Bbot%5D/repos",
      "events_url": "https://api.github.com/users/chatgpt-codex-connector%5Bbot%5D/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chatgpt-codex-connector%5Bbot%5D/received_events",
      "type": "Bot",
      "user_view_type": "public",
      "site_admin": false
    },
    "body": "Codex Review: Here are some suggestions.\n\nReply with `@codex fix comments` to fix any unresolved comments.\n\n<details> <summary>About Codex in GitHub</summary>\n\n[Your team has set up Codex to review pull requests in this repo](http://chatgpt.com/codex/settings/general). Reviews are triggered when you open a pull request for review, mark a draft as ready, or comment \"@codex review\". If Codex has suggestions, it will comment; otherwise it will react with 👍.\n\nCodex can also answer questions or update the PR. Try commenting \"@codex fix this CI failure\" or \"@codex address that feedback\".\n</details>",
    "state": "COMMENTED",
    "html_url": "https://github.com/BjornMelin/docmind-ai-llm/pull/30#pullrequestreview-3191634451",
    "pull_request_url": "https://api.github.com/repos/BjornMelin/docmind-ai-llm/pulls/30",
    "author_association": "NONE",
    "_links": {
      "html": {
        "href": "https://github.com/BjornMelin/docmind-ai-llm/pull/30#pullrequestreview-3191634451"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/BjornMelin/docmind-ai-llm/pulls/30"
      }
    },
    "submitted_at": "2025-09-06T06:30:16Z",
    "commit_id": "b651526b91f41cf2b95c4507f71794ba6f23f998"
  }
]
