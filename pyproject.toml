[project]
name = "docmind_ai_llm"
version = "0.1.0"
description = "Local LLM for AI-Powered Document Analysis"
authors = [{ name = "Bjorn Melin" }]
license-files = ["LICENSE"]
readme = "README.md"
requires-python = ">=3.10,<3.13"
keywords = ["ai", "rag", "document-analysis", "llm", "hybrid-search"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "streamlit==1.47.1",
    "ollama==0.5.1",
    "llama-cpp-python==0.3.14",
    "pydantic==2.11.7",
    "pydantic-settings==2.10.1",
    "pymupdf==1.26.3",
    "python-docx==1.2.0",
    "polars==1.31.0",
    "python-dotenv==1.1.1",
    "ruff==0.12.5",
    "qdrant-client==1.15.0",
    "tiktoken==0.9.0",
    "transformers==4.54.1",
    "torch==2.7.1",
    "torchvision==0.22.1",
    "pillow==11.3.0",
    "spacy==3.8.7",
    "llama-index==0.12.52",
    "llama-index-vector-stores-qdrant==0.6.1",
    "langgraph==0.5.4",
    "moviepy==2.2.1",
    "openai-whisper==20250625",
    "numba==0.61.2",
    "ragatouille==0.0.9.post2",
    "openinference-instrumentation-llama-index==4.3.2",
    "arize-phoenix==11.13.2",
    "llama-index-llms-ollama>=0.6.2",
    "llama-index-llms-llama-cpp>=0.4.0",
    "llama-index-embeddings-huggingface>=0.5.5",
    "llama-index-embeddings-jinaai>=0.4.0",
    "llama-index-embeddings-fastembed>=0.3.5",
    "llama-index-postprocessor-colbert-rerank>=0.3.0",
    "fastembed==0.7.1",
    "unstructured[all-docs]>=0.18.11",
    "diskcache==5.6.3",
    "en-core-web-sm",
    "pytest-cov>=6.2.1",
]

[project.optional-dependencies]
test = ["pytest==8.3.1"]
gpu = ["fastembed-gpu==0.7.1", "llama-cpp-python[cuda]"]

[project.urls]
Repository = "https://github.com/BjornMelin/docmind-ai"

[tool.ruff]
line-length = 88
target-version = "py312"

[tool.ruff.lint]
select = ["E", "F", "I", "UP", "N", "S", "B", "A", "C4", "PT", "SIM", "TID", "D"]
ignore = [
    "D203",  # 1 blank line required before class docstring (conflicts with D211)
    "D213",  # Multi-line docstring summary should start at the second line (conflicts with Google style)
    "S301",  # pickle usage (acceptable for local session persistence)
    "S603",  # subprocess call (acceptable for hardware detection)
    "S607",  # partial executable path (acceptable for well-known system commands)
    "S108",  # hardcoded temp file path (will be replaced with tempfile)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",  # assert usage (standard practice in pytest tests)
]

[tool.ruff.lint.isort]
known-first-party = ["docmind_ai"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.uv.sources]
en-core-web-sm = { url = "https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.8.0/en_core_web_sm-3.8.0-py3-none-any.whl" }

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--tb=short",
    "-ra",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "performance: marks tests as performance tests",
    "requires_gpu: marks tests that require GPU",
    "requires_network: marks tests that require network access",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[dependency-groups]
dev = [
    "hypothesis>=6.137.1",
    "pytest>=8.3.1",
    "pytest-asyncio>=0.23.0",
    "pytest-benchmark>=4.0.0",
]
gpu = [
    "fastembed-gpu==0.7.1",
    "llama-cpp-python[cuda]==0.3.14",
]
