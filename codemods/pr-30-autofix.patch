diff --git a/src/processing/document_processor.py b/src/processing/document_processor.py
index 32d872b..2dd7e69 100644
--- a/src/processing/document_processor.py
+++ b/src/processing/document_processor.py
@@ -298,2 +298,5 @@ class UnstructuredTransformation(TransformComponent):
-            """Coerce values to JSON-serializable forms."""
-            if isinstance(val, (str | int | float | bool)) or val is None:
+            """Coerce values to JSON-serializable forms.
+
+            Note: avoid ``isinstance(x, A | B)`` which is invalid at runtime.
+            """
+            if isinstance(val, (str, int, float, bool)) or val is None:  # noqa: UP038
@@ -301 +304 @@ class UnstructuredTransformation(TransformComponent):
-            if isinstance(val, (list | tuple)):
+            if isinstance(val, (list, tuple)):  # noqa: UP038
@@ -451,0 +455,21 @@ class DocumentProcessor:
+    def _get_max_document_size_mb(self) -> int:
+        """Resolve max document size from settings (nested preferred).
+
+        Prefer ``settings.processing.max_document_size_mb``. If a top-level
+        ``settings.max_document_size_mb`` is present (legacy/testing convenience),
+        use it as a fallback. Defaults to 100MB if neither found or invalid.
+        """
+        # Nested (authoritative)
+        from contextlib import suppress
+
+        with suppress(Exception):
+            val = self.settings.processing.max_document_size_mb
+            if isinstance(val, (int, float)) and val > 0:  # noqa: UP038
+                return int(val)
+        # Top-level (fallback for older tests/mocks)
+        with suppress(Exception):
+            val = self.settings.max_document_size_mb
+            if isinstance(val, (int, float)) and val > 0:  # noqa: UP038
+                return int(val)
+        return 100
+
@@ -552 +576 @@ class DocumentProcessor:
-        max_size = getattr(self.settings, "max_document_size_mb", 100)
+        max_size = self._get_max_document_size_mb()
